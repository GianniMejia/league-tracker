<form id="tournament-form">
    <h1>Update a Tournament</h1>
    <div class="success"></div>
    <div class="errors"></div>
    <input type="hidden" value="{{tournament.id}}" name="id" />
    <label>
        Tournament Name
        <input type="text" name="name" value="{{tournament.name}}" />
    </label>
    <label>
        Description
        <textarea name="description">{{tournament.description}}</textarea>
    </label>
    <button>Save</button>
</form>

<section id="participant-section">
    <h4>Particpants</h4>
    <div class="errors"></div>
    <ul></ul>
    <form>
        <div class="success"></div>
        <div class="errors"></div>
        <label>
            New Participant
            <input type="text" name="name" />
        </label>

        <button>Add</button>
    </form>
</section>

<section id="match-section">
    <h4>Matches</h4>
    <div class="errors"></div>
    <ul> </ul>
    <form>

        <h5>New Match</h5>
        <div class="success"></div>
        <div class="errors"></div>
        <label>
            Date
            <input type="datetime-local" name="dateCompleted" />
        </label>

        <label>
            Participant 1
            <select name="participant1Id"></select>
        </label>

        <label>
            Participant 2
            <select name="participant2Id"></select>
        </label>

        <button>Add</button>
    </form>
</section>

<script type="module">
    import {
        updateTournament,
        getParticipants,
        addParticipant,
        deleteParticipant
    } from "/js/api/tournament.js";
    const tournamentId = {{ tournament.id }};

    document.querySelector("#tournament-form").onsubmit =
        (e) => updateTournament(
            e,
            e.currentTarget.querySelector(".success"),
            e.currentTarget.querySelector(".errors")
        );

    displayParticipants();
    async function displayParticipants() {
        const section = document.querySelector("#participant-section");
        const participants = await getParticipants(tournamentId, section.querySelector(".errors"));
        section.querySelector("ul").innerHTML = "";

        // Display the data
        section.querySelector("ul").append(
            ...participants
                .map(
                    (particpant) => {
                        const li = document.createElement("li");
                        li.innerHTML = particpant.name;

                        const button = document.createElement("button");
                        button.innerHTML = "X";
                        button.onclick = async () => {
                            await deleteParticipant(
                                tournamentId,
                                particpant.id,
                                section.querySelector(".errors")
                            );
                            displayParticipants();
                        }
                        li.append(button);
                        return li;
                    }
                )
        );


        // Populate the drop-down lists
        document.querySelectorAll("#match-section form select").forEach((list) => {

            list.innerHTML = "";

            list.append(
                ...participants
                    .map(
                        (particpant) => {
                            const option = document.createElement("option");
                            option.innerHTML = particpant.name;
                            option.value = particpant.id;
                            return option;
                        }
                    )
            );
        });
    }

    document.querySelector("#participant-section form").onsubmit =
        async (e) => {
            await addParticipant(
                e,
                tournamentId,
                e.currentTarget.querySelector(".errors")
            );
            document.querySelector("#participant-section form [name='name']").value = "";
            displayParticipants();
        }

</script>

<script type="module">
    import {
        updateTournament,
        getMatches,
        addMatch,
        // deleteMatch
    } from "/js/api/tournament.js";
    const tournamentId = {{ tournament.id }};

    displayMatches();
    async function displayMatches() {
        const section = document.querySelector("#match-section");
        const matches = await getMatches(tournamentId, section.querySelector(".errors"));
        section.querySelector("ul").innerHTML = "";

        // Display the data
        section.querySelector("ul").append(
            ...matches
                .map(
                    (match) => {
                        const li = document.createElement("li");
                        const date = new Date(new Date(match.dateCompleted).getTime() + new Date(match.dateCompleted).getTimezoneOffset() * 60000);
                        li.innerHTML = `${match.participants[0].name} vs. ${match.participants[1].name} (${date.toLocaleString("en-US")})`;

                        const button = document.createElement("button");
                        button.innerHTML = "X";
                        button.onclick = async () => {
                            await deleteMatch(
                                tournamentId,
                                match.id,
                                section.querySelector(".errors")
                            );
                            displayMatches();
                        }
                        li.append(button);
                        return li;
                    }
                )
        );

    }

    document.querySelector("#match-section form").onsubmit =
        async (e) => {
            await addMatch(
                e,
                tournamentId,
                e.currentTarget.querySelector(".errors")
            );

            displayMatches();
        }


</script>